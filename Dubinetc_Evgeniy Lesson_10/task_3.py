print("Задача 3")
# Осуществить программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс «Клетка».
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__floordiv__, __truediv__()).
# Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и округление
# до целого числа деления клеток, соответственно.
# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5.
# В этом случае метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен
# по ссылке https://pythonworld.ru/osnovy/peregruzka-operatorov.html.

class Cell:
    # принимаю число nums
    def __init__(self, nums):
        # записываю его в атрибут self.nums
        self.nums = nums

    def make_order(self, rows):
        # '*' умножаю на количество строк rows (9), получаю девять звездочек, и делаю это в диапазоне деления количества
        # ячеек на rows - (self.nums // rows), к этому прибавляю знак переноса каретки '\n' плюс '*' умноженная на
        # остаток от деления ячеек на rows - (self.nums % rows)
        return '\n'.join(['*' * rows for _ in range(self.nums // rows)]) + '\n' + '*' * (self.nums % rows)

    def __str__(self):
        # привожу атрибут nums в str
        return str(self.nums)

    def __add__(self, other):
        # в методе __add__ складываю два значения self.nums + other.nums, перевожу в str и вывожу на экран
        return 'Sum of cell is ' + str(self.nums + other.nums)
        # второй вариант, складываю значения и передаю в этот же класс - Cell, как атрибут nums
        # return Cell(self.nums + other.nums)

    def __sub__(self, other):
        # делаю вычитание, если результат вычитания > 0, иначе вывожу сообщение "...вычитание невозможно"
        return self.nums - other.nums if self.nums - other.nums > 0 \
            else 'Ячеек в первой клетке меньше или равно второй, вычитание невозможно'

    def __mul__(self, other):
        # в методе __mul__ перемножаю два значения (self.nums * other.nums), перевожу в str и вывожу на экран
        return 'Multiply of cells is ' + str(self.nums * other.nums)

    def __truediv__(self, other):
        # в методе __truediv__ делю self.nums на other.nums, функцией round округляю до целого числа,
        # перевожу в str и вывожу на экран
        return 'Truediv of cells is ' + str(round(self.nums / other.nums))


cell_1 = Cell(7)
cell_2 = Cell(21)
print(cell_1)
print(cell_1 + cell_2)
print(cell_2.make_order(9))

